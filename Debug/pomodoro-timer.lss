
pomodoro-timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000002c6  0000035a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  0080010a  0080010a  00000364  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000394  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a9d  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000879  00000000  00000000  00000f21  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ae  00000000  00000000  0000179a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000012c  00000000  00000000  00001d48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003dc  00000000  00000000  00001e74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000158  00000000  00000000  00002250  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000023a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 4c 01 	jmp	0x298	; 0x298 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ec       	ldi	r30, 0xC6	; 198
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 30       	cpi	r26, 0x0F	; 15
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 15 01 	call	0x22a	; 0x22a <main>
  9e:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <shift>:
	show();
}


static void shift(){
	SR_PORT |= (1 << SRCLK);
  a6:	85 b1       	in	r24, 0x05	; 5
  a8:	84 60       	ori	r24, 0x04	; 4
  aa:	85 b9       	out	0x05, r24	; 5
	//_delay_us(1); //hold at least 20 ns
	SR_PORT &= ~(1 << SRCLK);
  ac:	85 b1       	in	r24, 0x05	; 5
  ae:	8b 7f       	andi	r24, 0xFB	; 251
  b0:	85 b9       	out	0x05, r24	; 5
  b2:	08 95       	ret

000000b4 <show>:

/************************************************************************/
/* Moves data from shift registers top storage registers (Qa-Qh pins)*/
/************************************************************************/
static void show(){
	SR_PORT |= (1 << RCLK);
  b4:	85 b1       	in	r24, 0x05	; 5
  b6:	88 60       	ori	r24, 0x08	; 8
  b8:	85 b9       	out	0x05, r24	; 5
	//_delay_us(1); //hold at least 20 ns
	SR_PORT &= ~(1 << RCLK);
  ba:	85 b1       	in	r24, 0x05	; 5
  bc:	87 7f       	andi	r24, 0xF7	; 247
  be:	85 b9       	out	0x05, r24	; 5
  c0:	08 95       	ret

000000c2 <clear>:
}
/************************************************************************/
/* Clears data from shift registers*/
/************************************************************************/
static void clear(){
	SR_PORT &= ~(1<<_SRCLR);
  c2:	85 b1       	in	r24, 0x05	; 5
  c4:	8d 7f       	andi	r24, 0xFD	; 253
  c6:	85 b9       	out	0x05, r24	; 5
	//_delay_us(1); //hold at least 20ns
	SR_PORT |= 1<<_SRCLR;
  c8:	85 b1       	in	r24, 0x05	; 5
  ca:	82 60       	ori	r24, 0x02	; 2
  cc:	85 b9       	out	0x05, r24	; 5
	show();
  ce:	0e 94 5a 00 	call	0xb4	; 0xb4 <show>
  d2:	08 95       	ret

000000d4 <SR_Init>:
static void clear();
static void show();

void SR_Init(){
	// set pins as output (1)
	SR_DDR |= (1 << SER) | (1 << _OE) | (1 << RCLK) | (1 << SRCLK) | (1 << _SRCLR);
  d4:	84 b1       	in	r24, 0x04	; 4
  d6:	8e 63       	ori	r24, 0x3E	; 62
  d8:	84 b9       	out	0x04, r24	; 4
	clear();
  da:	0e 94 61 00 	call	0xc2	; 0xc2 <clear>
	//output enable
	SR_PORT &= ~(1 << _OE);
  de:	85 b1       	in	r24, 0x05	; 5
  e0:	8f 7e       	andi	r24, 0xEF	; 239
  e2:	85 b9       	out	0x05, r24	; 5
  e4:	08 95       	ret

000000e6 <SR_Send>:
}

/************************************************************************/
/*Transmits a byte of data over SER line, and outputs it through Qa-Qh pins*/
/************************************************************************/
void SR_Send(uint8_t b){	
  e6:	1f 93       	push	r17
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	18 2f       	mov	r17, r24
	clear();
  ee:	0e 94 61 00 	call	0xc2	; 0xc2 <clear>
	for(int i=0;i<8;i++){
  f2:	c0 e0       	ldi	r28, 0x00	; 0
  f4:	d0 e0       	ldi	r29, 0x00	; 0
  f6:	14 c0       	rjmp	.+40     	; 0x120 <SR_Send+0x3a>
		/*write bit to SER*/
		if ((b>>i) & 1) {
  f8:	81 2f       	mov	r24, r17
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0c 2e       	mov	r0, r28
  fe:	02 c0       	rjmp	.+4      	; 0x104 <SR_Send+0x1e>
 100:	95 95       	asr	r25
 102:	87 95       	ror	r24
 104:	0a 94       	dec	r0
 106:	e2 f7       	brpl	.-8      	; 0x100 <SR_Send+0x1a>
 108:	80 ff       	sbrs	r24, 0
 10a:	04 c0       	rjmp	.+8      	; 0x114 <SR_Send+0x2e>
			SR_PORT |= (1 << SER);
 10c:	85 b1       	in	r24, 0x05	; 5
 10e:	80 62       	ori	r24, 0x20	; 32
 110:	85 b9       	out	0x05, r24	; 5
 112:	03 c0       	rjmp	.+6      	; 0x11a <SR_Send+0x34>
		}else{
			SR_PORT &= ~(1 << SER);
 114:	85 b1       	in	r24, 0x05	; 5
 116:	8f 7d       	andi	r24, 0xDF	; 223
 118:	85 b9       	out	0x05, r24	; 5
		}
		shift();	
 11a:	0e 94 53 00 	call	0xa6	; 0xa6 <shift>
/************************************************************************/
/*Transmits a byte of data over SER line, and outputs it through Qa-Qh pins*/
/************************************************************************/
void SR_Send(uint8_t b){	
	clear();
	for(int i=0;i<8;i++){
 11e:	21 96       	adiw	r28, 0x01	; 1
 120:	c8 30       	cpi	r28, 0x08	; 8
 122:	d1 05       	cpc	r29, r1
 124:	4c f3       	brlt	.-46     	; 0xf8 <SR_Send+0x12>
		}else{
			SR_PORT &= ~(1 << SER);
		}
		shift();	
	}
	show();
 126:	0e 94 5a 00 	call	0xb4	; 0xb4 <show>
}
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	1f 91       	pop	r17
 130:	08 95       	ret

00000132 <off>:
		default: break;
	}
}

static void off(){
	DISP_PORT &= ~(1<<DIG1);
 132:	8b b1       	in	r24, 0x0b	; 11
 134:	8f 77       	andi	r24, 0x7F	; 127
 136:	8b b9       	out	0x0b, r24	; 11
	DISP_PORT &= ~(1<<DIG2);
 138:	8b b1       	in	r24, 0x0b	; 11
 13a:	8f 7b       	andi	r24, 0xBF	; 191
 13c:	8b b9       	out	0x0b, r24	; 11
	DISP_PORT &= ~(1<<DIG3);
 13e:	8b b1       	in	r24, 0x0b	; 11
 140:	8f 7d       	andi	r24, 0xDF	; 223
 142:	8b b9       	out	0x0b, r24	; 11
	DISP_PORT &= ~(1<<DIG4);
 144:	8b b1       	in	r24, 0x0b	; 11
 146:	8f 7e       	andi	r24, 0xEF	; 239
 148:	8b b9       	out	0x0b, r24	; 11
 14a:	08 95       	ret

0000014c <LCD_Write>:
	LCD_Write(3,4);
}

void LCD_Write(uint8_t dig, uint8_t num)
{
	if (num > 9) return;
 14c:	6a 30       	cpi	r22, 0x0A	; 10
 14e:	50 f4       	brcc	.+20     	; 0x164 <LCD_Write+0x18>
	memory[dig]=numbers[num];
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	e6 2f       	mov	r30, r22
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	e0 50       	subi	r30, 0x00	; 0
 158:	ff 4f       	sbci	r31, 0xFF	; 255
 15a:	20 81       	ld	r18, Z
 15c:	fc 01       	movw	r30, r24
 15e:	e5 5f       	subi	r30, 0xF5	; 245
 160:	fe 4f       	sbci	r31, 0xFE	; 254
 162:	20 83       	st	Z, r18
 164:	08 95       	ret

00000166 <LCD_Init>:
const uint8_t numbers[10] = {0b00000011,0b10011111,0b00100101,0b00001101,0b10011001,0b01001001,0b01000001,0b00011111,0b00000001,0b00011001};
uint8_t memory[4];

void LCD_Init()
{
	DDRD |= (1<<DIG1) | (1<<DIG2) | (1<<DIG3) | (1<<DIG4);
 166:	8a b1       	in	r24, 0x0a	; 10
 168:	80 6f       	ori	r24, 0xF0	; 240
 16a:	8a b9       	out	0x0a, r24	; 10
	SR_Init();
 16c:	0e 94 6a 00 	call	0xd4	; 0xd4 <SR_Init>
	LCD_Write(0,1);
 170:	61 e0       	ldi	r22, 0x01	; 1
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_Write>
	LCD_Write(1,2);
 178:	62 e0       	ldi	r22, 0x02	; 2
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_Write>
	LCD_Write(2,3);
 180:	63 e0       	ldi	r22, 0x03	; 3
 182:	82 e0       	ldi	r24, 0x02	; 2
 184:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_Write>
	LCD_Write(3,4);
 188:	64 e0       	ldi	r22, 0x04	; 4
 18a:	83 e0       	ldi	r24, 0x03	; 3
 18c:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_Write>
 190:	08 95       	ret

00000192 <LCD_Refresh>:
	if (num > 9) return;
	memory[dig]=numbers[num];
}

void LCD_Refresh(uint8_t dig){
	switch (dig)
 192:	82 30       	cpi	r24, 0x02	; 2
 194:	99 f0       	breq	.+38     	; 0x1bc <LCD_Refresh+0x2a>
 196:	18 f4       	brcc	.+6      	; 0x19e <LCD_Refresh+0xc>
 198:	81 30       	cpi	r24, 0x01	; 1
 19a:	31 f0       	breq	.+12     	; 0x1a8 <LCD_Refresh+0x16>
 19c:	08 95       	ret
 19e:	83 30       	cpi	r24, 0x03	; 3
 1a0:	c1 f0       	breq	.+48     	; 0x1d2 <LCD_Refresh+0x40>
 1a2:	84 30       	cpi	r24, 0x04	; 4
 1a4:	01 f1       	breq	.+64     	; 0x1e6 <LCD_Refresh+0x54>
 1a6:	08 95       	ret
	{
		case 1:
			off();
 1a8:	0e 94 99 00 	call	0x132	; 0x132 <off>
			SR_Send(memory[0]);
 1ac:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <memory>
 1b0:	0e 94 73 00 	call	0xe6	; 0xe6 <SR_Send>
			DISP_PORT |= (1<<DIG1);
 1b4:	8b b1       	in	r24, 0x0b	; 11
 1b6:	80 68       	ori	r24, 0x80	; 128
 1b8:	8b b9       	out	0x0b, r24	; 11
		break;
 1ba:	08 95       	ret
		case 2:
			off();
 1bc:	0e 94 99 00 	call	0x132	; 0x132 <off>
			SR_Send(memory[1] & ~(1)); //show decimal point (min/sec separator)
 1c0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <memory+0x1>
 1c4:	8e 7f       	andi	r24, 0xFE	; 254
 1c6:	0e 94 73 00 	call	0xe6	; 0xe6 <SR_Send>
			DISP_PORT |= (1<<DIG2);
 1ca:	8b b1       	in	r24, 0x0b	; 11
 1cc:	80 64       	ori	r24, 0x40	; 64
 1ce:	8b b9       	out	0x0b, r24	; 11
		break;
 1d0:	08 95       	ret
		case 3:
			off();
 1d2:	0e 94 99 00 	call	0x132	; 0x132 <off>
			SR_Send(memory[2]);
 1d6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <memory+0x2>
 1da:	0e 94 73 00 	call	0xe6	; 0xe6 <SR_Send>
			DISP_PORT |= (1<<DIG3);
 1de:	8b b1       	in	r24, 0x0b	; 11
 1e0:	80 62       	ori	r24, 0x20	; 32
 1e2:	8b b9       	out	0x0b, r24	; 11
		break;
 1e4:	08 95       	ret
		case 4:
			off();
 1e6:	0e 94 99 00 	call	0x132	; 0x132 <off>
			SR_Send(memory[3]);
 1ea:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <memory+0x3>
 1ee:	0e 94 73 00 	call	0xe6	; 0xe6 <SR_Send>
			DISP_PORT |= (1<<DIG4);
 1f2:	8b b1       	in	r24, 0x0b	; 11
 1f4:	80 61       	ori	r24, 0x10	; 16
 1f6:	8b b9       	out	0x0b, r24	; 11
 1f8:	08 95       	ret

000001fa <goSleep>:
		goSleep();
    }
}

static void goSleep(){
	sleep_enable();
 1fa:	83 b7       	in	r24, 0x33	; 51
 1fc:	81 60       	ori	r24, 0x01	; 1
 1fe:	83 bf       	out	0x33, r24	; 51
	sleep_bod_disable();
 200:	85 b7       	in	r24, 0x35	; 53
 202:	80 66       	ori	r24, 0x60	; 96
 204:	85 bf       	out	0x35, r24	; 53
 206:	8f 7d       	andi	r24, 0xDF	; 223
 208:	85 bf       	out	0x35, r24	; 53
	sei();
 20a:	78 94       	sei
	sleep_cpu();
 20c:	88 95       	sleep
	sleep_disable();
 20e:	83 b7       	in	r24, 0x33	; 51
 210:	8e 7f       	andi	r24, 0xFE	; 254
 212:	83 bf       	out	0x33, r24	; 51
 214:	08 95       	ret

00000216 <WDT_off>:
}

static void WDT_off(void)
{
	/* Clear WDRF in MCUSR */
	MCUSR &= ~(1<<WDRF);
 216:	84 b7       	in	r24, 0x34	; 52
 218:	87 7f       	andi	r24, 0xF7	; 247
 21a:	84 bf       	out	0x34, r24	; 52
	/* Keep old prescaler setting to prevent unintentional time-out*/
	WDTCSR |= (1<<WDCE) | (1<<WDE);
 21c:	e0 e6       	ldi	r30, 0x60	; 96
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 81       	ld	r24, Z
 222:	88 61       	ori	r24, 0x18	; 24
 224:	80 83       	st	Z, r24
	/* Turn off WDT */
	WDTCSR = 0x00;
 226:	10 82       	st	Z, r1
 228:	08 95       	ret

0000022a <main>:
static void goSleep();

int main(void)
{
	//Disable unused modules
	power_adc_disable();
 22a:	e4 e6       	ldi	r30, 0x64	; 100
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	80 81       	ld	r24, Z
 230:	81 60       	ori	r24, 0x01	; 1
 232:	80 83       	st	Z, r24
	power_spi_disable();
 234:	80 81       	ld	r24, Z
 236:	84 60       	ori	r24, 0x04	; 4
 238:	80 83       	st	Z, r24
	power_twi_disable();
 23a:	80 81       	ld	r24, Z
 23c:	80 68       	ori	r24, 0x80	; 128
 23e:	80 83       	st	Z, r24
	power_timer0_disable();
 240:	80 81       	ld	r24, Z
 242:	80 62       	ori	r24, 0x20	; 32
 244:	80 83       	st	Z, r24
	power_usart0_disable();
 246:	80 81       	ld	r24, Z
 248:	82 60       	ori	r24, 0x02	; 2
 24a:	80 83       	st	Z, r24
	WDT_off();
 24c:	0e 94 0b 01 	call	0x216	; 0x216 <WDT_off>
	
	//Enable Timer1 interrupts every 8ms (prescaler 256, ctc mode)
	TCCR1B |= (1<<WGM12) | (1<<CS12);
 250:	e1 e8       	ldi	r30, 0x81	; 129
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	80 81       	ld	r24, Z
 256:	8c 60       	ori	r24, 0x0C	; 12
 258:	80 83       	st	Z, r24
	TIMSK1 |= (1<<OCIE1A);
 25a:	ef e6       	ldi	r30, 0x6F	; 111
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	82 60       	ori	r24, 0x02	; 2
 262:	80 83       	st	Z, r24
	OCR1A = 62500/DISP_REFRESH_RATE;
 264:	84 ef       	ldi	r24, 0xF4	; 244
 266:	91 e0       	ldi	r25, 0x01	; 1
 268:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 26c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	set_sleep_mode(SLEEP_MODE_IDLE);
 270:	83 b7       	in	r24, 0x33	; 51
 272:	81 7f       	andi	r24, 0xF1	; 241
 274:	83 bf       	out	0x33, r24	; 51
	
	int digit=1;
	LCD_Init();
 276:	0e 94 b3 00 	call	0x166	; 0x166 <LCD_Init>
	TIMSK1 |= (1<<OCIE1A);
	OCR1A = 62500/DISP_REFRESH_RATE;
	
	set_sleep_mode(SLEEP_MODE_IDLE);
	
	int digit=1;
 27a:	c1 e0       	ldi	r28, 0x01	; 1
 27c:	d0 e0       	ldi	r29, 0x00	; 0
	LCD_Init();
    while (1) 
    {
		cli();
 27e:	f8 94       	cli
		
		if (digit>4){
 280:	c5 30       	cpi	r28, 0x05	; 5
 282:	d1 05       	cpc	r29, r1
 284:	14 f0       	brlt	.+4      	; 0x28a <main+0x60>
			digit=1;
 286:	c1 e0       	ldi	r28, 0x01	; 1
 288:	d0 e0       	ldi	r29, 0x00	; 0
		}
		LCD_Refresh(digit);
 28a:	8c 2f       	mov	r24, r28
 28c:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_Refresh>
		digit++;
 290:	21 96       	adiw	r28, 0x01	; 1
		
		goSleep();
 292:	0e 94 fd 00 	call	0x1fa	; 0x1fa <goSleep>
    }
 296:	f3 cf       	rjmp	.-26     	; 0x27e <main+0x54>

00000298 <__vector_11>:
	WDTCSR |= (1<<WDCE) | (1<<WDE);
	/* Turn off WDT */
	WDTCSR = 0x00;
}

ISR(TIMER1_COMPA_vect){
 298:	1f 92       	push	r1
 29a:	0f 92       	push	r0
 29c:	0f b6       	in	r0, 0x3f	; 63
 29e:	0f 92       	push	r0
 2a0:	11 24       	eor	r1, r1
 2a2:	8f 93       	push	r24
	static uint8_t count=0;
	count++;
 2a4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 2a8:	8f 5f       	subi	r24, 0xFF	; 255
 2aa:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	//detect a second has elapsed
	if (count == DISP_REFRESH_RATE){
 2ae:	8d 37       	cpi	r24, 0x7D	; 125
 2b0:	11 f4       	brne	.+4      	; 0x2b6 <__vector_11+0x1e>
		count = 0;
 2b2:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
		//timer.update
	}
 2b6:	8f 91       	pop	r24
 2b8:	0f 90       	pop	r0
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	0f 90       	pop	r0
 2be:	1f 90       	pop	r1
 2c0:	18 95       	reti

000002c2 <_exit>:
 2c2:	f8 94       	cli

000002c4 <__stop_program>:
 2c4:	ff cf       	rjmp	.-2      	; 0x2c4 <__stop_program>
